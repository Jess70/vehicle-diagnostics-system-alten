services:
  minio:
    image: minio/minio:latest
    container_name: vehicle-diagnostics-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-minioadmin123}
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - vehicle-diagnostics

  redis:
    image: redis:7-alpine
    container_name: vehicle-diagnostics-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - vehicle-diagnostics

  backend:
    build:
      context: .
      dockerfile: apps/backend/Dockerfile
    container_name: vehicle-diagnostics-backend
    network_mode: host
    depends_on:
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=${PORT:-3000}
      - REDIS_HOST=${REDIS_HOST:-localhost}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - DATABASE_PATH=${DATABASE_PATH:-/usr/src/app/data/vehicle_diagnostics.db}
      - MINIO_ENDPOINT=${MINIO_ENDPOINT:-localhost:9000}
      - MINIO_PUBLIC_ENDPOINT=${MINIO_PUBLIC_ENDPOINT:-localhost:9000}
      - MINIO_BUCKET=${MINIO_BUCKET:-vehicle-logs}
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-minioadmin123}
      - LOG_PARSE_BATCH_SIZE=${LOG_PARSE_BATCH_SIZE:-100}
    volumes:
      - database_data:/usr/src/app/data
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 60s

  frontend:
    build:
      context: .
      dockerfile: apps/frontend/Dockerfile
    container_name: vehicle-diagnostics-frontend
    ports:
      - "4200:80"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - vehicle-diagnostics

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: vehicle-diagnostics-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    depends_on:
      - backend
    networks:
      - vehicle-diagnostics

volumes:
  minio_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  database_data:
    driver: local

networks:
  vehicle-diagnostics:
    driver: bridge
    name: vehicle-diagnostics-network
